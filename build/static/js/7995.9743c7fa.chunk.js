"use strict";(self.webpackChunkcity_walk_app=self.webpackChunkcity_walk_app||[]).push([[7995],{20176:(e,t,s)=>{s.d(t,{N3:()=>r,Om:()=>i});var h=s(1484);class i{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2?arguments[2]:void 0,h=arguments.length>3?arguments[3]:void 0;this.geometry=e,this.attributes=t,this.centroid=s,this.objectId=h,this.displayId=0,this.geohashX=0,this.geohashY=0}static fromJSON(e,t){const s=e.geometry?h.A.fromJSON(e.geometry):null,r=e.centroid?h.A.fromJSON(e.centroid):null,o=e.attributes[t];return new i(s,e.attributes,r,o)}weakClone(){const e=new i(this.geometry,this.attributes,this.centroid,this.objectId);return e.displayId=this.displayId,e.geohashX=this.geohashX,e.geohashY=this.geohashY,e}clone(){const e=this.geometry?.clone(),t=new i(e,{...this.attributes},this.centroid?.clone(),this.objectId);return t.displayId=this.displayId,t.geohashX=this.geohashX,t.geohashY=this.geohashY,t}}function r(e){return!!e.geometry?.coords?.length}},75146:(e,t,s)=>{s.d(t,{A:()=>h});class h{constructor(){this.objectIdFieldName=null,this.globalIdFieldName=null,this.geohashFieldName=null,this.geometryProperties=null,this.geometryType=null,this.spatialReference=null,this.hasZ=!1,this.hasM=!1,this.features=[],this.fields=[],this.transform=null,this.exceededTransferLimit=!1,this.uniqueIdField=null,this.queryGeometryType=null,this.queryGeometry=null}weakClone(){const e=new h;return e.objectIdFieldName=this.objectIdFieldName,e.globalIdFieldName=this.globalIdFieldName,e.geohashFieldName=this.geohashFieldName,e.geometryProperties=this.geometryProperties,e.geometryType=this.geometryType,e.spatialReference=this.spatialReference,e.hasZ=this.hasZ,e.hasM=this.hasM,e.features=this.features,e.fields=this.fields,e.transform=this.transform,e.exceededTransferLimit=this.exceededTransferLimit,e.uniqueIdField=this.uniqueIdField,e.queryGeometry=this.queryGeometry,e.queryGeometryType=this.queryGeometryType,e}}},1484:(e,t,s)=>{s.d(t,{A:()=>h});class h{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this.lengths=e??[],this.coords=t??[]}static fromJSON(e){return new h(e.lengths,e.coords)}static fromRect(e){const[t,s,i,r]=e,o=i-t,l=r-s;return new h([5],[t,s,o,0,0,l,-o,0,0,-l])}get isPoint(){return 0===this.lengths.length&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce(((e,t)=>e+t))}forEachVertex(e){let t=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(let s=0;s<this.lengths.length;s++){const h=this.lengths[s];for(let s=0;s<h;s++)e(this.coords[2*(s+t)],this.coords[2*(s+t)+1]);t+=h}}deltaDecode(){const e=this.clone(),{coords:t,lengths:s}=e;let h=0;for(const i of s){for(let e=1;e<i;e++)t[2*(h+e)]+=t[2*(h+e)-2],t[2*(h+e)+1]+=t[2*(h+e)-1];h+=i}return e}clone(e){if(0===this.lengths.length)return new h([],[this.coords[0],this.coords[1]]);const t=2*(0===this.lengths.length?1:this.lengths.reduce(((e,t)=>e+t))),s=this.coords.slice(0,t);return e?(e.set(s),new h(this.lengths,e)):new h(Array.from(this.lengths),Array.from(s))}}}}]);
//# sourceMappingURL=7995.9743c7fa.chunk.js.map