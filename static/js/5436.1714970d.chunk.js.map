{"version":3,"file":"static/js/5436.1714970d.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input-time-zone/input-time-zone.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/combobox-item-group.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/combobox-item-group/combobox-item-group.scss?tag=calcite-combobox-item-group&encapsulation=shadow"],"sourcesContent":["export const CSS = {\n  offset: \"offset\",\n};\n","import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"−\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZone, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\nexport async function getNormalizer(mode: TimeZoneMode): Promise<(timeZone: TimeZone) => TimeZone> {\n  if (mode === \"offset\") {\n    return (timeZone: TimeZone) => timeZone;\n  }\n\n  const { normalize } = await import(\"timezone-groups/dist/utils/time-zones.mjs\");\n  return normalize;\n}\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n  if (mode === \"name\") {\n    const { groupByName } = await import(\"timezone-groups/dist/groupByName/index.mjs\");\n    const groups = await groupByName();\n\n    return groups\n      .map<TimeZoneItem<string>>(({ label: timeZone }) => {\n        const label = toUserFriendlyName(timeZone);\n        const value = timeZone;\n\n        return {\n          label,\n          value,\n          metadata: {\n            filterValue: timeZone,\n          },\n        };\n      })\n      .filter((group) => !!group)\n      .sort();\n  }\n\n  const effectiveLocale =\n    standardTime === \"user\"\n      ? locale\n      : // we use locales that will always yield a short offset that matches `standardTime`\n        standardTime === \"utc\"\n        ? \"fr\"\n        : \"en-GB\";\n  const referenceDateInMs: number = referenceDate.getTime();\n\n  if (mode === \"region\") {\n    const [{ groupByRegion }, { getCountry, global: globalLabel }] = await Promise.all([\n      import(\"timezone-groups/dist/groupByRegion/index.mjs\"),\n      import(\"timezone-groups/dist/utils/region.mjs\"),\n    ]);\n    const groups = await groupByRegion();\n\n    return groups\n      .map<TimeZoneItemGroup>(({ label: region, tzs }) => {\n        tzs.sort((timeZoneA, timeZoneB) => {\n          const labeledTimeZoneA = getTimeZoneLabel(timeZoneA, messages);\n          const labeledTimeZoneB = getTimeZoneLabel(timeZoneB, messages);\n          const gmtTimeZoneString = \"Etc/GMT\";\n\n          if (timeZoneA.startsWith(gmtTimeZoneString) && timeZoneB.startsWith(gmtTimeZoneString)) {\n            // we use the IANA timezone for simpler and consistent sorting across locales\n            const offsetStringA = timeZoneA.substring(gmtTimeZoneString.length);\n            const offsetStringB = timeZoneB.substring(gmtTimeZoneString.length);\n\n            const offsetA = offsetStringA === \"\" ? 0 : parseInt(offsetStringA);\n            const offsetB = offsetStringB === \"\" ? 0 : parseInt(offsetStringB);\n\n            return offsetB - offsetA;\n          }\n\n          return labeledTimeZoneA.localeCompare(labeledTimeZoneB);\n        });\n\n        return {\n          label: getMessageOrKeyFallback(messages, region),\n          items: tzs.map((timeZone) => {\n            const decimalOffset = timeZoneOffsetToDecimal(\n              getTimeZoneShortOffset(timeZone, effectiveLocale, referenceDateInMs),\n            );\n            const label = getTimeZoneLabel(timeZone, messages);\n            const filterValue =\n              region === globalLabel\n                ? // we rely on the label for search since GMT items have their signs inverted (see https://en.wikipedia.org/wiki/Tz_database#Area)\n                  // in addition to the label we also add \"Global\" and \"Etc\" to allow searching for these items\n                  `${getTimeZoneLabel(globalLabel, messages)} Etc`\n                : toUserFriendlyName(timeZone);\n\n            const countryCode = getCountry(timeZone);\n            const country = getMessageOrKeyFallback(messages, countryCode);\n\n            return {\n              label,\n              value: timeZone,\n              metadata: {\n                country: country === label ? undefined : country,\n                filterValue,\n                offset: decimalOffset,\n              },\n            };\n          }),\n        };\n      })\n      .sort((groupA, groupB) =>\n        groupA.label === globalLabel ? -1 : groupB.label === globalLabel ? 1 : groupA.label.localeCompare(groupB.label),\n      );\n  }\n\n  const [{ groupByOffset }, { DateEngine }] = await Promise.all([\n    import(\"timezone-groups/dist/groupByOffset/index.mjs\"),\n    import(\"timezone-groups/dist/groupByOffset/strategy/native/index.mjs\"),\n  ]);\n\n  const groups = await groupByOffset({\n    dateEngine: new DateEngine(),\n    groupDateRange: 1,\n    startDate: new Date(referenceDateInMs).toISOString(),\n  });\n\n  const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n  const offsetTimeZoneNameBlockList = [\"Factory\", \"Etc/UTC\"];\n\n  // we remove blocked entries from tzs and adjust label indices accordingly\n  groups.forEach((group) => {\n    const indexOffsets: number[] = [];\n    let removedSoFar = 0;\n\n    group.tzs.forEach((tz, index) => {\n      if (offsetTimeZoneNameBlockList.includes(tz)) {\n        removedSoFar++;\n      }\n      indexOffsets[index] = removedSoFar;\n    });\n\n    group.tzs = group.tzs.filter((tz) => !offsetTimeZoneNameBlockList.includes(tz));\n\n    group.labelTzIdx = group.labelTzIdx\n      .map((index) => index - indexOffsets[index])\n      .filter((index) => index >= 0 && index < group.tzs.length);\n  });\n\n  return groups\n    .map<TimeZoneItem<number>>(({ labelTzIdx, tzs }) => {\n      const groupRepTz = tzs[0];\n      const decimalOffset = timeZoneOffsetToDecimal(\n        getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n      );\n      const value = toOffsetValue(groupRepTz, referenceDateInMs);\n      const tzLabels = labelTzIdx.map((index: number) => getTimeZoneLabel(tzs[index], messages));\n      const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n      return {\n        label,\n        value,\n        metadata: {\n          filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n        },\n      };\n    })\n    .filter((group) => !!group)\n    .sort((groupA, groupB) => groupA.value - groupB.value);\n}\n\nfunction getTimeZoneLabel(timeZone: string, messages: InputTimeZoneMessages): string {\n  return messages[timeZone] || getCity(timeZone);\n}\n\nexport function getSelectedRegionTimeZoneLabel(city: string, country: string, messages: InputTimeZoneMessages): string {\n  const template = messages.timeZoneRegionLabel;\n  return template.replace(\"{city}\", city).replace(\"{country}\", getMessageOrKeyFallback(messages, country));\n}\n\nexport function getMessageOrKeyFallback(messages: InputTimeZoneMessages, key: string): string {\n  return messages[key] || key;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function getCity(timeZone: string): string {\n  return timeZone.split(\"/\").pop();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZone,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nfunction isGroup(item: TimeZoneItem | TimeZoneItemGroup): item is TimeZoneItemGroup {\n  return (item as TimeZoneItemGroup).items !== undefined;\n}\n\nfunction flattenTimeZoneItems(timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[]): TimeZoneItem[] {\n  return isGroup(timeZoneItems[0]) ? timeZoneItems.flatMap((item) => item.items) : timeZoneItems;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : flattenTimeZoneItems(timeZoneItems).find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n.offset {\n  white-space: nowrap;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getNormalizer,\n  getSelectedRegionTimeZoneLabel,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    if (!this.timeZoneItems) {\n      return;\n    }\n\n    this.updateTimeZoneItems();\n    this.updateTimeZoneSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openChanged(): void {\n    // we set the property instead of the attribute to ensure open/close events are emitted properly\n    this.comboboxEl.open = this.open;\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value) {\n      if (this.clearable) {\n        this.value = value;\n        this.selectedTimeZoneItem = null;\n        return;\n      }\n\n      this.value = oldValue;\n      this.selectedTimeZoneItem = this.findTimeZoneItem(oldValue);\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  /**\n   * Helps override the selected item's label for region mode outside of item rendering logic to avoid flickering text change\n   *\n   * @param open\n   * @private\n   */\n  private overrideSelectedLabelForRegion(open: boolean): void {\n    if (this.mode !== \"region\" || !this.selectedTimeZoneItem) {\n      return;\n    }\n\n    const { label, metadata } = this.selectedTimeZoneItem;\n\n    this.comboboxEl.selectedItems[0].textLabel =\n      !metadata.country || open\n        ? label\n        : getSelectedRegionTimeZoneLabel(label, metadata.country, this.messages);\n  }\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(false);\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(true);\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.getAttribute(\"data-label\"));\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItems(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n  }\n\n  private async updateTimeZoneSelection(): Promise<void> {\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    value = value === null ? \"\" : value;\n\n    return value ? this.normalizer(value) : value;\n  }\n\n  private normalizer: (timeZone: TimeZone) => TimeZone;\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    const [, normalizer] = await Promise.all([setUpMessages(this), getNormalizer(this.mode)]);\n\n    this.normalizer = normalizer;\n    await this.updateTimeZoneItems();\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.openChanged();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n    this.overrideSelectedLabelForRegion(this.open);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\"\n                ? this.messages.namePlaceholder\n                : this.mode === \"offset\"\n                  ? this.messages.offsetPlaceholder\n                  : this.messages.regionPlaceholder\n            }\n            placeholderIcon=\"search\"\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.renderItems()}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  private renderItems(): VNode[] {\n    if (this.mode === \"region\") {\n      return this.renderRegionItems();\n    }\n\n    return this.timeZoneItems.map((group) => {\n      const selected = this.selectedTimeZoneItem === group;\n      const { label, metadata, value } = group;\n\n      return (\n        <calcite-combobox-item\n          data-label={label}\n          key={label}\n          metadata={metadata}\n          selected={selected}\n          textLabel={label}\n          value={value}\n        />\n      );\n    });\n  }\n\n  private renderRegionItems(): VNode[] {\n    return (this.timeZoneItems as TimeZoneItemGroup[]).flatMap(({ label, items }) => (\n      <calcite-combobox-item-group key={label} label={label}>\n        {items.map((item) => {\n          const selected = this.selectedTimeZoneItem === item;\n          const { label, metadata, value } = item;\n\n          return (\n            <calcite-combobox-item\n              data-label={label}\n              description={metadata.country}\n              key={label}\n              metadata={metadata}\n              selected={selected}\n              textLabel={label}\n              value={value}\n            >\n              <span class={CSS.offset} slot=\"content-end\">\n                {metadata.offset}\n              </span>\n            </calcite-combobox-item>\n          );\n        })}\n      </calcite-combobox-item-group>\n    ));\n  }\n}\n","export const CSS = {\n  list: \"list\",\n  label: \"label\",\n  title: \"title\",\n};\n","import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { ComboboxChildElement } from \"../combobox/interfaces\";\nimport { getAncestors, getDepth } from \"../combobox/utils\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-combobox-item`s.\n */\n@Component({\n  tag: \"calcite-combobox-item-group\",\n  styleUrl: \"combobox-item-group.scss\",\n  shadow: true,\n})\nexport class ComboboxItemGroup {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, signifies that the group comes after another group without any children (items or sub-groups), otherwise indicates that the group comes after another group that has children. Used for styling.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) afterEmptyGroup = false;\n\n  /** Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`. */\n  @Prop({ mutable: true }) ancestors: ComboboxChildElement[];\n\n  /** Specifies the title of the component. */\n  @Prop() label!: string;\n\n  /**\n   * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.\n   *\n   * @internal\n   */\n  @Prop() scale: Scale = \"m\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.ancestors = getAncestors(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteComboboxItemGroupElement;\n\n  guid: string = guid();\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el, scale } = this;\n    const depth = getDepth(el);\n\n    return (\n      <ul\n        aria-labelledby={this.guid}\n        class={{ [CSS.list]: true, [`scale--${scale}`]: true }}\n        role=\"group\"\n      >\n        <li\n          class={{ [CSS.label]: true }}\n          id={this.guid}\n          role=\"presentation\"\n          style={{ \"--calcite-combobox-item-spacing-indent-multiplier\": `${depth}` }}\n        >\n          <span class={CSS.title}>{this.label}</span>\n        </li>\n        <slot />\n      </ul>\n    );\n  }\n}\n",".scale--s {\n  @apply text-n2h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.2\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.1\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.2\");\n}\n\n.scale--m {\n  @apply text-n1h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.3\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.2\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.3\");\n}\n\n.scale--l {\n  @apply text-0h;\n  --calcite-combobox-item-spacing-unit-l: theme(\"spacing.4\");\n  --calcite-combobox-item-spacing-unit-s: theme(\"spacing.3\");\n  --calcite-combobox-item-spacing-indent: theme(\"spacing.4\");\n}\n\n:host,\n.list {\n  @apply m-0 flex flex-col p-0;\n}\n\n:host(:focus),\n.list:focus {\n  @apply outline-none;\n}\n\n.label {\n  @apply text-color-3 box-border flex w-full min-w-0 max-w-full;\n}\n\n.title {\n  --calcite-combobox-item-indent-value: calc(\n    var(--calcite-combobox-item-spacing-indent) * var(--calcite-combobox-item-spacing-indent-multiplier)\n  );\n  border: 0 solid;\n  @apply border-b-color-3\n    text-color-2\n    word-break\n    block\n    flex-1\n    border-b\n    font-bold;\n  padding-block: var(--calcite-combobox-item-spacing-unit-l);\n  padding-inline: var(--calcite-combobox-item-spacing-unit-s);\n  margin-inline-start: var(--calcite-combobox-item-indent-value);\n}\n\n::slotted(calcite-combobox-item-group:not([after-empty-group])) {\n  padding-block-start: var(--calcite-combobox-item-spacing-unit-l);\n}\n\n@include base-component();\n"],"names":["CSS","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","replace","async","getNormalizer","mode","timeZone","normalize","createTimeZoneItems","locale","messages","referenceDate","standardTime","groupByName","map","_ref","label","toUserFriendlyName","value","metadata","filterValue","filter","group","sort","effectiveLocale","referenceDateInMs","getTime","groupByRegion","getCountry","global","globalLabel","Promise","all","_ref2","region","tzs","timeZoneA","timeZoneB","labeledTimeZoneA","getTimeZoneLabel","labeledTimeZoneB","gmtTimeZoneString","startsWith","offsetStringA","substring","offsetStringB","offsetA","parseInt","localeCompare","getMessageOrKeyFallback","items","decimalOffset","getTimeZoneShortOffset","countryCode","country","undefined","offset","groupA","groupB","groupByOffset","DateEngine","groups","dateEngine","groupDateRange","startDate","Date","toISOString","listFormatter","Intl","ListFormat","style","type","offsetTimeZoneNameBlockList","forEach","indexOffsets","removedSoFar","tz","index","includes","labelTzIdx","length","_ref3","groupRepTz","timeZoneName","Number","toOffsetValue","tzLabels","offsetLabel","groupLabel","timeZoneLabel","createTimeZoneOffsetLabel","format","split","pop","getCity","key","arguments","now","getDateTimeFormat","formatToParts","find","_ref4","findTimeZoneItemByProp","timeZoneItems","prop","valueToMatch","flatMap","item","flattenTimeZoneItems","InputTimeZone","proxyCustomElement","HTMLElement","setComboboxRef","el","this","comboboxEl","onComboboxBeforeClose","event","stopPropagation","overrideSelectedLabelForRegion","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","selectedItem","target","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","getAttribute","selectedValue","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItems","updateTimeZoneSelection","openChanged","handleValueChange","oldValue","normalizeValue","clearable","findTimeZoneItem","timeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","onLabelClick","city","textLabel","timeZoneRegionLabel","fallbackValue","getTimezoneOffset","DateTimeFormat","resolvedOptions","offsetStyle","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","normalizer","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","regionPlaceholder","placeholderIcon","readOnly","ref","scale","selectionMode","status","validationIcon","validationMessage","renderItems","HiddenFormInputSlot","component","renderRegionItems","_ref5","description","class","slot","ComboboxItemGroup","guid","ancestors","getAncestors","depth","getDepth","role","id"],"sourceRoot":""}